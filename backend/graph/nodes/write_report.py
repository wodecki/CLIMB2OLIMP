import os
import json
import datetime
from dotenv import load_dotenv

# Get the absolute path to the root of the workspace
workspace_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '../../'))
# Construct the path to the .env file
dotenv_path = os.path.join(workspace_root, '.env')
# Load the .env file explicitly
load_dotenv(dotenv_path, override=True)
# Retrieve the API key and model
openai_api_key = os.getenv('OPENAI_API_KEY')
model = os.getenv('MODEL')

from langchain_openai import ChatOpenAI
llm = ChatOpenAI(model=model, temperature=0)

from graph.state import OverallState
from langchain_core.messages import SystemMessage
from config import config_manager

def write_report(state: OverallState):
    """ Node to generate a simple maturity assessment report """
    # Access maturity levels from the state
    maturity_levels = state.get('maturity_levels', {})
    questionnaire = state.get('questionnaire', {})
    
    # Create a simple report content
    report_content = f"""# CLIMB2 Maturity Assessment Report

Generated on: {datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

## Executive Summary

This report presents the results of your CLIMB2 maturity assessment. The assessment evaluates your organization's current readiness across key areas for AI implementation.

## Maturity Levels by Category

"""
    
    # Add maturity levels for each category
    for category, level in maturity_levels.items():
        report_content += f"""### {category}
**Current Maturity Level: {level}**

"""
    
    # Add questionnaire responses summary
    if questionnaire:
        report_content += """## Assessment Responses Summary

The following sections summarize your responses to the CLIMB2 questionnaire:

"""
        for category, questions in questionnaire.items():
            report_content += f"### {category}\n\n"
            for question, answer in questions.items():
                report_content += f"**Q:** {question}  \n**A:** {answer}\n\n"
    
    # Add next steps
    report_content += """## Next Steps

Based on your CLIMB2 assessment, we recommend proceeding to the detailed OLIMP evaluation for:

1. **Gap Analysis**: Identify specific areas where improvements are needed
2. **Priority Setting**: Determine which areas to focus on first
3. **Implementation Roadmap**: Get detailed recommendations for AI readiness

To continue with the comprehensive analysis, please proceed to the OLIMP questionnaire in the application.

---

*This report was generated by the CLIMB2 assessment system. For a complete analysis with detailed recommendations, please complete the full OLIMP evaluation.*
"""
    
    # Create reports directory if it doesn't exist
    reports_dir = os.path.join(workspace_root, 'reports')
    os.makedirs(reports_dir, exist_ok=True)
    
    # Generate a filename based on current timestamp
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"climb2_report_{timestamp}.md"
    filepath = os.path.join(reports_dir, filename)
    
    # Write the report content to the file
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(report_content)
    
    # Return the final report and the filepath
    relative_filepath = os.path.relpath(filepath, workspace_root)
    
    return {"report": report_content, "filepath": relative_filepath}
